import java.io.File;
import java.lang.reflect.Array;
import java.util.Set;

public class Lab_5 {

	public static int factorial(int n)
	{
		if(n==0)
			return 1;
		
		return n * factorial(n-1);
	}
	
	public static void printStars(int n)
	{
		if(n==0)
			return;
		
		printStars(n-1);
		
		for(int i = 0; i < n; i++)
			System.out.print("*");
		
		System.out.println();
	}
	
	public static int gcd(int a, int b, int t)
	{
		if(a % t == 0 && b % t == 0)
			return t;
		else
			return gcd(a,b,t-1);
	}
	
	public static int gcd(int a, int b)
	{
		return gcd(a,b,((a<=b)?a:b));
	}
	
	public static <T extends Comparable<T>> int binarySearch(T haystack[], T needle, int front, int back)
	{
		int midpoint = (back + front) / 2;
		
		if(front >= back || midpoint >= haystack.length)
			return -1;
		if(haystack[midpoint].equals(needle))
			return midpoint;
		else
		{
			if(haystack[midpoint].compareTo(needle) > 0)
				return binarySearch(haystack, needle, 0, midpoint);
			else 
				return binarySearch(haystack, needle, midpoint, haystack.length-1);
		}
	}
	
	public static <T extends Comparable<T>> int binarySearch(T haystack[], T needle)
	{
		return binarySearch(haystack, needle, 0, haystack.length-1);
	}
	
	public static void printRecursiveDirectoryList(String path)
	{
		File directory = new File(path);
		
		if(!directory.exists() || !directory.isDirectory())
		{
			System.out.println("Path " + path + " does not exist or is not a directory.");
			return;
		}
		
		System.out.println(path);
		
		for(File folderItem : directory.listFiles())
		{
			String currentFileAsString = folderItem.toString();
			
			// Ignore relative path files.
			if(folderItem.isDirectory()){
				if(currentFileAsString == "." || 
				   currentFileAsString== ".."){
					return;
				}
				
				printRecursiveDirectoryList(currentFileAsString);
			} 
			else
			{
				System.out.println(currentFileAsString);
			}
		}
	}
	
	public static void printRecursiveDirectoryList()
	{
		for(int i = 0; i < File.listRoots().length; i++)
		{
			printRecursiveDirectoryList(File.listRoots()[i].toString());
		}
	}
	
	public static void main(String[] args) {
		System.out.println("The factorial of 10 is: " + factorial(10));

		System.out.println("Printing a 5-tall star triangle.");
		printStars(5);
		
		System.out.println("The greatest common divisor of 50 and 20 is: " + gcd(50,20));
		
		Integer intArray[] = {1,2,3,4,5,6,7};
		System.out.println("Element '8' is located at index '" + binarySearch(intArray,1) + "'");
		
		//printRecursiveDirectoryList("/home/jbleau/Dev/");
	}

}
